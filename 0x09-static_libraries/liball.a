!<arch>
0-isupper.c/    0           0     0     644     285       `
#include "main.h"

/**
 * _isupper - This program checks for uppercase letters
 * @c: character to check
 *
 * Return: 1 if uppercase otherwise return o
 */

int _isupper(int c)
{
        if (c >= 'A' && c <= 'Z')
                return (1);
        else
                return (0);
}

0-memset.c/     0           0     0     644     442       `
#include "main.h"
/**
 * _memset - This function fills the a memory with a constant byte
 * @s: starting address of memory to be filled
 * @b: the desired value
 * @n: number of bytes to be changed
 *
 * Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
        int x = 0;

        for (; n > 0; x++)
        {
                s[x] = b;
                n--;
        }
        return (s);
}
0-strcat.c/     0           0     0     644     484       `
#include "main.h"
/**
 * _strcat - This function concatenates two strings
 * @ch1: input value
 * @ch2: input value
 *
 * Return: void
 */
char *_strcat(char *ch1, char *ch2)
{
        int x;
        int y;

        x = 0;
        while (ch1[x] != '\0')
        {
                x++;
        }
        y = 0;
        while (ch2[y] != '\0')
        {
                ch1[x] = ch2[y];
                x++;
                y++;
        }

        ch1[x] = '\0';
        return (ch1);
}
100-atoi.c/     0           0     0     644     593       `
#include "main.h"
/**
 * _atoi - This function converts a string into an integer.
 *
 * @s: the string to convert.
 *
 * Return: integer.
 */
int _atoi(char *s)
{
        int sign = 1, x = 0;
        unsigned int res = 0;


        while (!(s[x] <= '9' && s[x] >= '0') && s[x] != '\0')
        {
                if (s[x] == '-')
                        sign *= -1;
                x++;
        }
        while (s[x] <= '9' && (s[x] >= '0' && s[x] != '\0'))
        {
                res = (res * 10) + (s[x] - '0');
                x++;
        }
        res *= sign;
        return (res);
 }

1-isdigit.c/    0           0     0     644     303       `
#include "main.h"

/**
 * _isdigit - This program checks if a given value
 * is a digit between 0 and 9
 * @c: char to be checked
 *
 * Return: 1 if digit and 0 otherwise
 */

int _isdigit(int c)
{
        if (c >= '0' && c <= '9')
                return (1);
        else
                return (0);
}

1-memcpy.c/     0           0     0     644     427       `
#include "main.h"
/**
 *_memcpy - This function copies a memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n bytes changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
        int x = 0;
        int y = n;

        for (; x < y; x++)
        {
                dest[x] = src[x];
                n--;
        }
        return (dest);
}

1-strncat.c/    0           0     0     644     528       `
#include "main.h"
/**
 * _strncat - This function concatenate two strings
 * using at most n bytes from src
 * @ch1: input value
 * @ch2: input value
 * @n: input value
 *
 * Return: ch1
 */
char *_strncat(char *ch1, char *ch2, int n)
{
        int x;
        int y;

        x = 0;
        while (ch1[x] != '\0')
        {
                x++;
        }
        y = 0;
        while (y < n && ch2[y] != '\0')
        {
        ch1[x] = ch2[y];
        x++;
        y++;
        }
        ch1[x] = '\0';
        return (ch1);
}
2-strchr.c/     0           0     0     644     341       `
#include "main.h"
/**
 * _strchr - This function locates a character in a string
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
        int x = 0;

        for (; s[x] >= '\0'; x++)
        {
                if (s[x] == c)
                        return (&s[x]);
        }
        return (0);
}

2-strlen.c/     0           0     0     644     289       `
#include "main.h"
/**
 * _strlen - This function returns the length of a string
 * @s: string
 * Return: length
 */
int _strlen(char *s)
{
        int legnthy = 0;

        while (*s != '\0')
        {
                legnthy++;
                s++;
        }

        return (legnthy);
}

2-strncpy.c/    0           0     0     644     459       `
#include "main.h"
/**
 * _strncpy - This function copies a string
 * @ch1: input value
 * @ch2: input value
 * @n: input value
 *
 * Return: ch1
 */
char *_strncpy(char *ch1, char *ch2, int n)
{
        int x;

        x = 0;
        while (x < n && ch2[x] != '\0')
        {
                ch1[x] = ch2[x];
                x++;
        }
        while (x < n)
        {
                ch1[x] = '\0';
                x++;
        }

        return (ch1);
}

3-islower.c/    0           0     0     644     330       `
#include "main.h"

/**
 * _islower - This function checks for lower case character
 * @c: is a character to be checked
 * Return: 1 if c is lower and 0 otherwise
 */
int _islower(int c)
{
        if (c > 97 && c < 122)
        {
                return (1);
        }
        else
        {
                return (0);
        }
}
3-puts.c/       0           0     0     644     268       `
#include "main.h"
/**
 * _puts - This function prints a string, followed by a new line, to stdout
 * @str: string to print
 */
void _puts(char *str)
{
        while (*str != '\0')
        {
                _putchar(*str++);
        }
                _putchar('\n');
}
3-strcmp.c/     0           0     0     644     444       `
#include "main.h"
/**
 * _strcmp - This function compares two  string values
 * @s1: input value
 * @s2: input value
 *
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
        int x;

        x = 0;
        while (s1[x] != '\0' && s2[x] != '\0')
        {
                if (s1[x] != s2[x])
                {
                        return (s1[x] - s2[x]);
                }
                x++;
        }
        return (0);
}
3-strspn.c/     0           0     0     644     678       `
#include "main.h"
/**
 * _strspn - This function get the length of prefix substring
 * @s: input
 * @accept: input
 * Return: Always 0 if successful
 */
unsigned int _strspn(char *s, char *accept)
{
        unsigned int x = 0;
        int y;

        while (*s)
        {
                for (y = 0; accept[y]; y++)
                {
                        if (*s == accept[y])
                        {
                                x++;
                                break;
                        }
                        else if (accept[y + 1] == '\0')
                                return (x);
                }
                s++;
        }
        return (x);
}
4-isalpha.c/    0           0     0     644     372       `
#include "main.h"

/**
 * _isalpha - This function checks for alphabetic character
 * @c: c is a letter to be checked
 * Return: 1 if letter, lower or upper otherwise return 0
 */
int _isalpha(int c)
{
        if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
        {
                return (1);
        }
        else
        {
                return (0);
        }
}
4-strpbrk.c/    0           0     0     644     521       `
#include "main.h"
/**
 * _strpbrk - This function searches a string for any of a set of byte
 * @s: input
 * @accept: input
 * Return: Always 0 if successful
 */
char *_strpbrk(char *s, char *accept)
{
                int x;

                while (*s)
                {
                        for (x = 0; accept[x]; x++)
                        {
                        if (*s == accept[x])
                        return (s);
                        }
                s++;
                }

        return ('\0');
}

5-strstr.c/     0           0     0     644     568       `
#include "main.h"
/**
 * _strstr - This function locates a substring
 * @haystack: input
 * @needle: input
 * Return: Always 0 if successful
 */
char *_strstr(char *haystack, char *needle)
{
        for (; *haystack != '\0'; haystack++)
        {
                char *x = haystack;
                char *y = needle;

                while (*x == *y && *y != '\0')
                {
                        x++;
                        y++;
                }

                if (*y == '\0')
                        return (haystack);
        }

        return (0);
}
6-abs.c/        0           0     0     644     256       `
#include "main.h"

/**
 * _abs - This function computes the absolute value
 * of an integer
 * @n: the int to check
 * Return: 0 if successful
 */
int _abs(int n)
{
        if (n >= 0)
        {
                return (n);
        }
        return (-n);
}
9-strcpy.c/     0           0     0     644     437       `
#include "main.h"

/**
 * char *_strcpy - This function copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
        int x = 0;
        int y = 0;

        while (*(src + x) != '\0')
        {
                x++;
        }
        for ( ; y < x ; y++)
        {
                dest[y] = src[y];
        }
        dest[x] = '\0';
        return (dest);
}

main.c/         0           0     0     644     224       `
#include "main.h"
/**
 * main - This program prints to the output
 * Return: 0 upon executiom
 */

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best \
hacker\"\n\t- Kevin Mitnick");
	return (0);
}
_putchar.c/     0           0     0     644     264       `
#include "main.h"
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
